{"version":3,"sources":["api/apiRequest.js","api/user.api.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["handleResponse","response","Promise","resolve","reject","ok","contentType","headers","get","includes","json","then","text","handleError","error","message","jsonRequest","url","body","method","Headers","append","options","mode","JSON","stringify","fetch","baseUrl","Card","props","monster","className","alt","src","id","name","email","CardList","monsters","map","index","SearchBox","value","handleChange","placeholder","type","onChange","App","useState","setMonsters","searchFiled","setSearchField","useEffect","res","err","console","log","filteredMonsters","filter","toLowerCase","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAAMA,G,MAAiB,SAACC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,GAAIH,EAASI,GAAI,CACf,IAAIC,EAAcL,EAASM,QAAQC,IAAI,gBACnCF,GAAeA,EAAYG,SAAS,oBACtCR,EAASS,OAAOC,MAAK,SAACD,GAAD,OAAUP,EAAQO,MAEvCP,EAAQF,QAGVA,EAASW,OAAOD,MAAK,SAACC,GAAD,OAAUR,EAAOQ,WAKtCC,EAAc,SAACC,GACnB,OAAOZ,QAAQE,OAAOU,GAASA,EAAMC,UAG1BC,EAAc,SAACC,EAAKC,GAA0B,IAApBC,EAAmB,uDAAV,MACxCZ,EAAU,IAAIa,QAEpBb,EAAQc,OAAO,SAAU,oBACzB,IAAIC,EAAU,CAAEf,UAASgB,KAAM,OAAQJ,OAAQA,GAM/C,OALID,IACFI,EAAQH,OAASA,EACjBG,EAAQJ,KAAOM,KAAKC,UAAUP,GAC9BX,EAAQc,OAAO,eAAgB,qBAE1BK,MAAMT,EAAKK,GAASX,KAAKX,EAAgBa,IC3B5Cc,EAAU,uC,gBCaDC,EAbF,SAACC,GAAW,IACjBC,EAAYD,EAAZC,QACN,OACE,sBAAKC,UAAW,iBAAhB,UACE,qBACEC,IAAK,UACLC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEL,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCGHC,EAVE,SAACR,GAAW,IACrBS,EAAaT,EAAbS,SACN,OACE,qBAAKP,UAAW,YAAhB,SACGO,EAASC,KAAI,SAACT,EAASU,GACtB,OAAO,cAAC,EAAD,CAAkBV,QAASA,GAAhBU,SCKXC,G,MAXG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACxC,OACE,uBACEb,UAAW,SACXc,KAAM,SACND,YAAaA,EACbF,MAAOA,EACPI,SAAUH,MCgCDI,MApCf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACRV,EADQ,KACEW,EADF,OAEuBD,mBAAS,IAFhC,mBAERE,EAFQ,KAEKC,EAFL,KAIbC,qBAAU,WJNHpC,EAAY,GAAD,OACbW,EADa,UAEhB,KACA,OIIahB,MACX,SAAC0C,GACCJ,EAAYI,MAEd,SAACC,GACCC,QAAQC,IAAIF,QAGf,IAEH,IAIMG,EAAmBnB,EAASoB,QAAO,SAAC5B,GAAD,OACvCA,EAAQK,KAAKwB,cAAclD,SAASyC,EAAYS,kBAGlD,OACE,sBAAK5B,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,CACEa,YAAa,kBACbD,aAbe,SAACiB,GACpBT,EAAeS,EAAEC,OAAOnB,QAapBA,MAAOQ,IAERZ,GAAY,cAAC,EAAD,CAAUA,SAAUmB,QCzBxBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.decacd60.chunk.js","sourcesContent":["const handleResponse = (response) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (response.ok) {\r\n      let contentType = response.headers.get('content-type')\r\n      if (contentType && contentType.includes('application/json')) {\r\n        response.json().then((json) => resolve(json))\r\n      } else {\r\n        resolve(response)\r\n      }\r\n    } else {\r\n      response.text().then((text) => reject(text))\r\n    }\r\n  })\r\n}\r\n\r\nconst handleError = (error) => {\r\n  return Promise.reject(error && error.message)\r\n}\r\n\r\nexport const jsonRequest = (url, body, method = 'GET') => {\r\n  const headers = new Headers()\r\n\r\n  headers.append('Accept', 'application/json')\r\n  let options = { headers, mode: 'cors', method: method }\r\n  if (body) {\r\n    options.method = method\r\n    options.body = JSON.stringify(body)\r\n    headers.append('Content-Type', 'application/json')\r\n  }\r\n  return fetch(url, options).then(handleResponse, handleError)\r\n}\r\n","import { jsonRequest } from './apiRequest'\r\n\r\nconst baseUrl = 'https://jsonplaceholder.typicode.com'\r\nexport function fetchUsers() {\r\n  return jsonRequest(\r\n    `${baseUrl}/users`,\r\n    null,\r\n    'GET'\r\n  )\r\n}\r\nexport function fetchUserAlbums(userId) {\r\n  return jsonRequest(\r\n    `${baseUrl}/users/${userId}/albums`,\r\n    null,\r\n    'GET'\r\n  )\r\n}\r\nexport function fetchAlbumPhotos(albumId) {\r\n  return jsonRequest(\r\n    `${baseUrl}/albums/${albumId}/photos`,\r\n    null,\r\n    'GET'\r\n  )\r\n}\r\n","import React from 'react'\nimport '../../assets/card.styles.css'\nconst Card = (props) => {\n  let { monster } = props\n  return (\n    <div className={'card-container'}>\n      <img\n        alt={'monster'}\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  )\n}\nexport default Card\n","import React from 'react'\nimport '../../assets/card-list.styles.css'\nimport Card from '../Card/Card'\n\nconst CardList = (props) => {\n  let { monsters } = props\n  return (\n    <div className={'card-list'}>\n      {monsters.map((monster, index) => {\n        return <Card key={index} monster={monster} />\n      })}\n    </div>\n  )\n}\nexport default CardList\n","import React from 'react'\nimport '../../assets/search-box.styles.css'\n\nconst SearchBox = ({ value, handleChange, placeholder }) => {\n  return (\n    <input\n      className={'search'}\n      type={'search'}\n      placeholder={placeholder}\n      value={value}\n      onChange={handleChange}\n    />\n  )\n}\nexport default SearchBox\n","import React, { useEffect, useState } from 'react'\nimport './assets/App.css'\nimport { fetchUsers } from './api/user.api'\nimport CardList from './components/CardList/CardList'\nimport SearchBox from './components/SearchBox/SearchBox'\n\nfunction App() {\n  let [monsters, setMonsters] = useState([])\n  let [searchFiled, setSearchField] = useState('')\n\n  useEffect(() => {\n    fetchUsers().then(\n      (res) => {\n        setMonsters(res)\n      },\n      (err) => {\n        console.log(err)\n      }\n    )\n  }, [])\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value)\n  }\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchFiled.toLowerCase())\n  )\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Inc.</h1>\n      <SearchBox\n        placeholder={'Search Monsters'}\n        handleChange={handleChange}\n        value={searchFiled}\n      />\n      {monsters && <CardList monsters={filteredMonsters} />}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}